#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("web-app:server");
var http = require("http");
const {
  addUser,
  removeUser,
  getUser,
  getUsersInRoom,
} = require("../socket/users");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 22530);
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require("socket.io")(server, {
  cors: {
    credentials: true,
    origin: ["http://localhost:3000"],
  },
});

//#region Socket.io
io.on("connection", (socket) => {
  socket.on("join", ({ name, room }, callback) => {
    try {
      console.log("join", name, room);
      const { error, user } = addUser({ id: socket.id, name, room });

      if (user.room == undefined) return;

      socket.join(user.room);
      console.log(user);

      console.log(`${user.name} has joined ${user.room}`);

      socket.emit("message", {
        user: "admin",
        text: `${user.name}, welcome to room ${user.room}.`,
      });
      socket.broadcast
        .to(user.room)
        .emit("message", { user: "admin", text: `${user.name} has joined!` });

      io.to(user.room).emit("roomData", {
        room: user.room,
        users: getUsersInRoom(user.room),
      });

      callback();
    } catch {
      console.log("error join");
    }
  });

  socket.on("disconnect", () => {
    try {
      const user = removeUser(socket.id);

      if (user) {
        io.to(user.room).emit("message", {
          user: "Admin",
          text: `${user.name} has left.`,
        });
        io.to(user.room).emit("roomData", {
          room: user.room,
          users: getUsersInRoom(user.room),
        });
      }
    } catch {
      console.log("error leave");
    }
  });

  socket.on("bid", ({ amount, name }) => {
    try {
      const user = getUser(name);

      if (user.room == undefined) return;

      console.log(`${user.name} has bid ${amount}`);

      io.to(user.room).emit("bidNotif", { user: user.name, amount: amount });
    } catch {
      console.log("error bid");
    }
  });
});

//#endregion

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, (err) => {
  if (err) console.log("Error: " + err);
  else console.log("Server is running on port " + port);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
